media <- apply(datos_temp[valor:(valor+6),], 2, mean)
media_semanal <- c(media_semanal, media)
}
media_semanal<-c()
#d)Generar una serie de medias semanales a partir de los datos medios diarios
x<-seq(1,365, by=7)
for(valor in x){
media<-apply(datos_temp[valor:valor+6,],2,mean(datos_temp$Temp_media))
media_semanal<-c(media_semanal,media)
}
for(valor in x){
media<-apply(datos_temp[valor:valor+6,],2,mean(datos_temp))
media_semanal<-c(media_semanal,media)
}
for(valor in x){
media<-apply(datos_temp[valor:valor+6,],2,mean(datos_temp[,1]))
media_semanal<-c(media_semanal,media)
}
for(valor in x){
media<-apply(datos_temp[valor:valor+6,],2,mean)
media_semanal<-c(media_semanal,media)
}
x
datos_temp[1,7]
datos_temp$Temp_media[1,7]
datos_temp$Temp_media[1:7,]
datos_temp[1:7,]
datos_temp$Temp_media[1:7,]
for(valor in x){
media<-apply(datos_temp[valor:valor+6,],1,mean)
media_semanal<-c(media,media_semanal)
}
#d)Generar una serie de medias semanales a partir de los datos medios diarios de un data frame de dimensiones [1,1]
x<-seq(1,365, by=7)
media_semanal<-c()
for(valor in x){
media<-apply(datos_temp,datos_temp[valor:valor+6,1],mean,na.rm = TRUE)
media_semanal<-c(media,media_semanal)
}
for (valor in x) {
semana <- datos_temp[valor:(valor + 6), 1]
media <- mean(semana, na.rm = TRUE)
media_semanal <- c(media, media_semanal)
}
y<-seq(1,365,by=12)
365/12
365/31
365/30
y<-seq(1,365,by=30)  #mensual deberia car en cada uno, doce datos
anio<-c()
for(valor in y){
mes<-datos_temp[valor:(valor+30),1]
anio<-c(mes,anio)
}
anio
y
365/5
y<-seq(1,365,by=5)  #mensual deberia car en cada uno, doce datos
anio<-c()
for(valor in y){
mes<-datos_temp[valor:(valor+5),1]
anio<-c(mes,anio)
}
anio
print(length(mes))
y<-seq(1,365,by=5)  #mensual deberia car en cada uno, doce datos
anio<-c()
for(valor in y){
mes<-datos_temp[valor:(valor+4),1]
print(length(mes))
anio<-c(mes,anio)
}
anio_df<-data.frame(anio)
View(anio_df)
for (valor in y) {
mes <- datos_temp[valor:(valor + 4), 1]
print(length(mes))
anio <- c(anio, mes)
}
anio<-c()
y<-seq(1,365,by=5)  #mensual deberia car en cada uno, doce datos
for (valor in y) {
mes <- datos_temp[valor:(valor + 4), 1]
print(length(mes))
anio <- c(anio, mes)
}
for (valor in y) {
mes <- datos_temp[valor:(valor + 4), 1]
if(length(mes)==5){
anio<-c(mes,anio)
}else{
print("error")
}
}
for (valor in y) {
mes <- datos_temp[valor:(valor + 4), 1]
if(length(mes)==5){
mes_cadacinco<-mes
anio<-c(mes_cadacinco,anio)
}else{
print("error")
}
}
#setwd("C:/Users/Fernando Cabrera/Desktop/Cami_Labo/Practicas/")
setwd("/home/clinux01/Escritorio/CamiLabo/Practicas/Datos Practica 3-20231011/")
Temp_media <-scan("datos_tmedia_SABE_2010.txt",sep="") #en casa no me corre esta pero en la facu si
datos_temp<-data.frame(Temp_media)
y<-seq(1,365,by=5)  #mensual deberia car en cada uno, doce datos
anio<-c()
for (valor in y) {
mes <- datos_temp[valor:(valor + 4), 1]
if(length(mes)==5){
mes_cadacinco<-mes
anio<-c(mes_cadacinco,anio)
}else{
print("error")
}
}
for (valor in y) {
mes <- datos_temp[valor:(valor + 4), 1]
if(length(mes)==5){
mes_cadacinco<-mean(mes, na.rm = T)
anio<-c(mes_cadacinco,anio)
}else{
print("error")
}
}
anio<-c()
y<-seq(1,365,by=5)  #mensual deberia car en cada uno, doce datos
anio<-c()
for (valor in y) {
mes <- datos_temp[valor:(valor + 4), 1]
mes_cadacinco<-mean(mes, na.rm = T)
anio<-c(mes_cadacinco,anio)
}
###############Clase Practica 12/10##################
#abrir archivos de excel en R
rm(list=ls())
setwd("/home/clinux01/Escritorio/CamiLabo/Practica_4/")
path = getwd( )
#cargo libreria
require(readxl)
# sintanxis<-excel_sheets(xls = nombre_archivo_xlsx, sheet = numero_o_nombre_de_hoja_a_abrir, ...)
library(readxl)
rchivo_ejemplo = paste(path,"/datos/datos.xls",sep="")
archivo_ejemplo = paste(path,"/datos/datos.xls",sep="")
cantidad_hojas <- length(excel_sheets(archivo_ejemplo)) #veo la cantidad de hojas del archivo
archivo_ejemplo = paste(path,"/datos/datos.xls",sep="")
cantidad_hojas <- length(excel_sheets(archivo_ejemplo)) #veo la cantidad de hojas del archivo
print(paste("El archivo tiene ", cantidad_hojas, " hojas"))
setwd("/home/clinux01/Escritorio/CamiLabo/Practica_4/")
path = getwd( )
archivo_ejemplo = paste(path,"datos.xls",sep="")
cantidad_hojas <- length(excel_sheets(archivo_ejemplo)) #veo la cantidad de hojas del archivo
archivo_ejemplo = paste(path,"datos.xls",sep="/")
cantidad_hojas <- length(excel_sheets(archivo_ejemplo)) #veo la cantidad de hojas del archivo
archivo<-excel_sheets(xls = datos.xls)
archivo_ejemplo = excel_sheets("datos.xls")
cantidad_hojas <- length(excel_sheets(archivo_ejemplo)) #veo la cantidad de hojas del archivo
archivo_ejemplo = ("datos.xls")
cantidad_hojas <- length(excel_sheets(archivo_ejemplo)) #veo la cantidad de hojas del archivo
print(paste("El archivo tiene ", cantidad_hojas, " hojas"))
nombre_hojas <- excel_sheets(archivo_ejemplo) #veo los nombres de las hojas del archivo
print("Estas hojas se llaman:",nombre_hojas)
print(nombre_hojas)
print(past("Estas hojas se llaman:",nombre_hojas))
print(paste("Estas hojas se llaman:",nombre_hojas))
abro_archivo_ejemplo <- read_excel(archivo_ejemplo, sheet = 3) #por numero de hoja
head(abro_archivo_ejemplo) #veo las primeras 6 filas
class(abro_archivo_ejemplo) #veo que tipo de objeto es
abro_archivo_ejemplo_lis<-as.list(abro_archivo_ejemplo)
View(abro_archivo_ejemplo_lis)
abro_archivo_ejemplo <- read_excel(archivo_ejemplo)
View(abro_archivo_ejemplo_lis)
View(abro_archivo_ejemplo)
setwd("/home/clinux01/Escritorio/CamiLabo/Practica_4/")
path = getwd( )
# sintanxis<-excel_sheets(xls = nombre_archivo_xlsx, sheet = numero_o_nombre_de_hoja_a_abrir, ...)
library(readxl)  #si esta instalada esto no debe dar error
archivo_ejemplo = "datos.xls"
cantidad_hojas <- length(excel_sheets(archivo_ejemplo)) #veo la cantidad de hojas del archivo
print(paste("El archivo tiene ", cantidad_hojas, " hojas"))
nombre_hojas <- excel_sheets(archivo_ejemplo) #veo los nombres de las hojas del archivo
print(paste("Estas hojas se llaman:",nombre_hojas))
print(nombre_hojas)
abro_archivo_ejemplo <- read_excel(archivo_ejemplo, sheet = 3) #por numero de hoja
abro_archivo_ejemplo <- read_excel(archivo_ejemplo, sheet = "serie") #otra opcion, por nombre de hoja
head(abro_archivo_ejemplo) #veo las primeras 6 filas
class(abro_archivo_ejemplo) #veo que tipo de objeto es
#abro_archivo_ejemplo_lis<-as.list(abro_archivo_ejemplo)  lo puedo forzar a ser otras cosas
#Ejercicio en clase
#abrir el archivo
archivo = "Historicos_Estacion_3316.xlsx"
nombre_hojas <- excel_sheets(archivo)
cantidad_hojas <- length(excel_sheets(archivo))
abro_archivo <- read_excel(archivo, sheet = 3)
abro_archivo <- read_excel(archivo, sheet = 1)
View(abro_archivo)
head(archivo)
library(lubridate)
head(abro_archivo)
attach(abro_archivo)
tiempos <- dmy_hm(datos_altura$'Fecha y Hora') #paso columna de fechas a
tiempos <- dmy_hm(abro_archivo$'Fecha y Hora') #paso columna de fechas a
anios <- year(tiempos) #extraigo los anios
meses <- month(tiempos) #extraigo los meses
dias <- day(tiempos)
mi_data_frame_alturas <- data.frame("Anio" = anios,
"Mes" = meses,
"Dia" = dias,
"Alturas" = datos_altura$'Altura [m]')
head(mi_data_frame_alturas)
mi_data_frame_alturas <- data.frame("Anio" = anios,
"Mes" = meses,
"Dia" = dias,
"Alturas" = abro_archivo$'Altura [m]')
head(mi_data_frame_alturas)
View(mi_data_frame_alturas)
attach(mi_data_frame_alturas)
dim(mi_data_frame_alturas)
#Calcular el promedio de la altura del río de enero para cada año entre 1980 y 2021
for(mes in names(mi_data_frame_alturas)){
if(mes==1){
prom_enero<-apply(mi_data_frame_alturas,4,mean)
}
}
print(prom_enero)
mi_data_frame_alturas$Mes
mi_data_frame_alturas
which(mi_data_frame_alturas[,2]==1)
mi_data_frame_alturas$Mes(mi_data_frame_alturas==1)
mi_data_frame_alturas[,2](mi_data_frame_alturas==1)
enero<-mi_data_frame_alturas$Mes(mi_data_frame_alturas==1)
enero<-mi_data_frame_alturas$Mes(mi_data_frame_alturas=1)
enero<-mi_data_frame_alturas$Mes[mi_data_frame_alturas=1]
mi_data_frame_alturas$Mes[mi_data_frame_alturas=1]
pos_enero<-which(mi_data_frame_alturas$Mes=1)
#Calcular el promedio de la altura del río de enero para cada año entre 1980 y 2021
for(mes in names(mi_data_frame_alturas)){
if(mes==Mes){
if(Mes==1)
enero=subset(mi_data_frame_alturas,Mes=="1")
prom_enero<-apply(mi_data_frame_alturas,4,mean)
}
}
#Calcular el promedio de la altura del río de enero para cada año entre 1980 y 2021
for(mes in names(mi_data_frame_alturas)){
if(mes==Mes){
enero=subset(mi_data_frame_alturas,mes=="1")
prom_enero<-apply(enero,4,mean)
}
}
#Calcular el promedio de la altura del río de enero para cada año entre 1980 y 2021
for(mes in names(mi_data_frame_alturas)){
if(mes==Mes){
enero=subset(mi_data_frame_alturas,Mes=="1")
prom_enero<-apply(enero,4,mean)
}
}
#Calcular el promedio de la altura del río de enero para cada año entre 1980 y 2021
for(mes in names(mi_data_frame_alturas)){
if(mes==Mes){
if(mes==1){
enero=subset(mi_data_frame_alturas,Mes=="1")
prom_enero<-apply(enero,4,mean)
}
}
}
for(variable  in names(mi_data_frame_alturas)){
if(variable==Mes){
if(variable==1){
enero=subset(mi_data_frame_alturas,Mes=="1")
prom_enero<-apply(enero,4,mean)
}
}
}
for(variable  in names(mi_data_frame_alturas)){
if(variable==Mes[[1]]){
if(variable==1){
enero=subset(mi_data_frame_alturas,Mes=="1")
prom_enero<-apply(enero,4,mean)
}
}
}
prom_enero
mi_data_frame_alturas[[2]][[1]]
mi_data_frame_alturas[[2]][1]
mi_data_frame_alturas[[2]]
which(mi_data_frame_alturas$Mes=1)
which(mi_data_frame_alturas$Mes==1)
enero<-mi_data_frame_alturas[,4][mi_data_frame_alturas[,2]==1]
anio<- Anio[posiciones_enero,1]
posiciones_enero<-which(mi_data_frame_alturas$Mes==1)
anio<- Anio[posiciones_enero,1]
anios<-mi_data_frame_alturas[,1][mi_data_frame_alturas[,2]==1]
df_enero<-data.frame(enero,anios)
View(df_enero)
prom_enero<-apply(df_enero,1,mean)
enero_anio<-df_enero[,1][df_enero[,2]==1980]
x<-seq(1980,2021,by=1)
for(anio in x){
enero=subset(df_enero,anios==anio)
prom_enero<-mean(enero)
datos_enero<-c(prom_enero,datos_enero)
}
datos_enero<-c()
datos_enero<-c()
x<-seq(1980,2021,by=1)
for(anio in x){
enero=subset(df_enero,anios==anio)
prom_enero<-mean(enero, na.rm=TRUE)
datos_enero<-c(prom_enero,datos_enero)
}
datos_enero
prom_enero
for(anio in x){
enero_anio<-df_enero[,1][df_enero[,2]==anio]
prom_enero<-mean(enero, na.rm=TRUE)
datos_enero<-c(prom_enero,datos_enero)
}
#abro_archivo_ejemplo_lis<-as.list(abro_archivo_ejemplo)  lo puedo forzar a ser otras cosas
#Ejercicio en clase
#abrir el archivo
archivo = "Historicos_Estacion_3316.xlsx"
abro_archivo <- read_excel(archivo, sheet = 1)
attach(abro_archivo)
tiempos <- dmy_hm(abro_archivo$'Fecha y Hora') #paso columna de fechas a
anios <- year(tiempos) #extraigo los anios
meses <- month(tiempos) #extraigo los meses
dias <- day(tiempos)
mi_data_frame_alturas <- data.frame("Anio" = anios,
"Mes" = meses,
"Dia" = dias,
"Alturas" = abro_archivo$'Altura [m]')
head(mi_data_frame_alturas)
attach(mi_data_frame_alturas)
#Otra forma
datos_enero<-c()
x<-seq(1980,2021,by=1)
for(anio in x){
enero_anio<-df_enero[,1][df_enero[,2]==anio]
prom_enero<-mean(enero_anio, na.rm=TRUE)
datos_enero<-c(prom_enero,datos_enero)
}
#Otra forma
datos_enero<-c()
x<-seq(1980,2021,by=1)
enero<-mi_data_frame_alturas[,4][mi_data_frame_alturas[,2]==1]
anios<-mi_data_frame_alturas[,1][mi_data_frame_alturas[,2]==1]
df_enero<-data.frame(enero,anios)
for(anio in x){
enero_anio<-df_enero[,1][df_enero[,2]==anio]
prom_enero<-mean(enero_anio, na.rm=TRUE)
datos_enero<-c(prom_enero,datos_enero)
}
#Estimar cual es el minimo de la media de altura de río de enero y a que año corresponde
min_enero<-min(datos_enero)
max_enero<-max(datos_enero)
pos_min<-which(min_enero)
pos_min<-which(df_enero$anios=min_enero)
enero_anio<-df_enero$enero[df_enero$anios==anio]
prom_enero<-mean(enero_anio, na.rm=TRUE)
datos_enero<-c(prom_enero,datos_enero)
365/5
install.packages("writexl")
365-1
364/4
364/5
364/5
365/4
setwd("/home/clinux01/Escritorio/Cami_Labo/Practica_4/")
#leyenda arriba y  a la derecha
############################ Paletas de colores Mapas #################################
require(ncdf4)
require(fields)
require(mapdata)
nc<- ncdf_open(paste("/home/clinux01/Escritorio/Cami_Labo/Practica_4/netcdf_SLP_SA_1979_2014.nc",sep=""))
lon<-get.var.ncdf(nc,"longitude")
nc<- ncdf_open(paste("/home/clinux01/Escritorio/Cami_Labo/Practica_4/netcdf_SLP_SA_1979_2014.nc",sep=""))
install.packages("fields")
install.packages("mapdata")
install.packages("ncdf4")
#leyenda arriba y  a la derecha
############################ Paletas de colores Mapas #################################
require(ncdf4)
require(fields)
require(mapdata)
nc<- ncdf_open(paste("/home/clinux01/Escritorio/Cami_Labo/Practica_4/netcdf_SLP_SA_1979_2014.nc",sep=""))
nc<- ncdf_open(paste("/home/clinux01/Escritorio/Cami_Labo/Practica_4/netcdf_SLP_SA_1979_2014.nc",sep=""))
nc<-ncdf_open("netcdf_SLP_SA_1979_2014.nc")
nc<-ncdf_open(paste("/home/clinux01/Escritorio/Cami_Labo/Practica_4/netcdf_SLP_SA_1979_2014.nc",sep=""))
nc<-ncdf_open(paste("/home/clinux01/Escritorio/Cami_Labo/Practica_4/netcdf_SLP_SA_1979_2014.nc",sep=""))
#leyenda arriba y  a la derecha
############################ Paletas de colores Mapas #################################
require(ncdf4)
require(fields)
require(mapdata)
nc<-ncdf_open(paste("/home/clinux01/Escritorio/Cami_Labo/Practica_4/netcdf_SLP_SA_1979_2014.nc",sep=""))
lon<-ncvar_get(nc,"longitudes")
lats<-ncvar_get(nc,"latitudes")
time<-ncvar_get(nc,"time")
MSLP<-ncvar_get(nc,"msl") ## MSLP * 100 esta en pascales <-#cambio unidades
#leyenda arriba y  a la derecha
############################ Paletas de colores Mapas #################################
require(ncdf4)
require(fields)
require(mapdata)
nc<-nc_open(paste("/home/clinux01/Escritorio/Cami_Labo/Practica_4/netcdf_SLP_SA_1979_2014.nc",sep=""))
lon<-ncvar_get(nc,"longitudes")
lats<-ncvar_get(nc,"latitudes")
lon<-ncvar_get(nc,"longitude")
lats<-ncvar_get(nc,"latitude")
time<-ncvar_get(nc,"time")
MSLP<-ncvar_get(nc,"msl") ## MSLP * 100 esta en pascales <-#cambio unidades
#puedso graficar de un tiempo a la vez
P <- MSLP[,,1]/100
mn<-min(P); mx<-max(P)
brk <- seq(mn,mx,length.out = 13)
levs<-brk
RGB<-matrix(c(0,  0.167,	1,
0.1,	0.4,	1,
0.2,	0.6,	1,
0.4,	0.8,	1,
0.6,	0.933,	1,
0.8,	1,	1,
1,	1,	0.8,
1,	0.933,	0.6,
1,	0.8,	0.4,
1,	0.6,	0.2,
1,	0.4,	0.1,
1,	0.167,	0), nrow=12, byrow=TRUE)
RGB<-matrix(c(0,  0.167,	1,    #defino la paleta de colores
0.1,	0.4,	1,
0.2,	0.6,	1,
0.4,	0.8,	1,
0.6,	0.933,	1,
0.8,	1,	1,
1,	1,	0.8,
1,	0.933,	0.6,
1,	0.8,	0.4,
1,	0.6,	0.2,
1,	0.4,	0.1,
1,	0.167,	0), nrow=12, byrow=TRUE)
cols<-rgb(RGB[,1],RGB[,2],RGB[,3]) #convierte color a rgb
image.plot(lon-360,rev(lats[1:55]),P[,55:1], breaks=brk, lab.breaks=names(brk), col=cols)
imagen.plot(lon-360,rev(lats[1:55]),P[,55:1], breaks=brk, lab.breaks=names(brk), col=cols)
image.plot(lon-360,rev(lats[1:55]),P[,55:1], breaks=brk, lab.breaks=names(brk), col=cols)
image.plot(lon-360,rev(lats[1:55]),P[,55:1], breaks=brk, lab.breaks=names(brk), col=cols)
contour(lon-360,rev(lats[1:55]),P[,55:1], add=TRUE, col=c("gray12","gray50","gray89"), levels = c(1010,1012,1016))
image.plot(lon-360,rev(lats[1:55]),P[,55:1], breaks=brk, lab.breaks=names(brk), col=cols)
require(fields)
require(mapdata)
install.packages("fields")
require(fields)
install.packages("mapdaa")
install.packages("mapdata")
require(mapdata)
#leyenda arriba y  a la derecha
############################ Paletas de colores Mapas #################################
require(ncdf4)
require(fields)
require(mapdata)
nc<-nc_open(paste("/home/clinux01/Escritorio/Cami_Labo/Practica_4/netcdf_SLP_SA_1979_2014.nc",sep=""))
cols<-rgb(RGB[,1],RGB[,2],RGB[,3]) #convierte color a rgb / son codigos de colores
image.plot(lon-360,rev(lats[1:55]),P[,55:1], breaks=brk, lab.breaks=names(brk), col=cols)
contour(lon-360,rev(lats[1:55]),P[,55:1], add=TRUE, col=c("gray12","gray50","gray89"), levels = c(1010,1012,1016))
map(database="worldHires", add=TRUE, col="black", interior=TRUE)
rgbs <- cbind(12, seq(32,255, length=12), seq(32,255, length=12)) / 255
cols <- rgb(rgbs[,1], rgbs[,2], rgbs[,3])
image.plot(lon-360,rev(lats[1:55]),P[,55:1], breaks=brk, lab.breaks=names(brk), col=cols)
plot(lon-360,rev(lats[1:55]),P[,55:1], breaks=brk, lab.breaks=names(brk), col=cols)
image(lon-360,rev(lats[1:55]),P[,55:1], breaks=brk, lab.breaks=names(brk), col=cols)
image.plot(lon-360,rev(lats[1:55]),P[,55:1], breaks=brk, lab.breaks=names(brk), col=cols)
image(lon-360,rev(lats[1:55]),P[,55:1], breaks=brk, lab.breaks=names(brk), col=cols)
contour(lon-360,rev(lats[1:55]),P[,55:1], add=TRUE, col=c("gray12","gray50","gray89"), levels = c(1010,1012,1016))
map(database="worldHires", add=TRUE, col="black", interior=TRUE)
image(lon-360,rev(lats[1:55]),P[,55:1], breaks=brk, lab.breaks=names(brk), col=cols) #revlats <- las da vuelta y P tambien sio hace el maa al reves
contour(lon-360,rev(lats[1:55]),P[,55:1], add=TRUE, col=c("gray12","gray50","gray89"), levels = c(1010,1012,1016))
map(database="worldHires", add=TRUE, col="black", interior=TRUE)
setwd()
getwd()
require(ncdf4)
library(ncdf4) #cargo libreria ncdf4
archivo <- ("air.mon.mean.nc") #donde esta el archivo
nc<- nc_open (archivo) #abro el archivo netCDF
archivo <- ("/home/clinux01/Escritorio/Cami_Labo/Practica_4/datos-20231031T140954Z-001/datos/air.mon.mean.nc") #donde esta el archivo
nc<- nc_open (archivo) #abro el archivo netCDF
nc
# Si queremos extraer la variable Monthly Mean Air Temp:
temp_aire<- ncvar_get(nc, "air")
#Miro de que clase y las dimensiones de los datos
class(temp_aire) # es un array
dim(temp_aire) # 144(lon), 73(lat), 884(time)
#Si queremos extraer la variable Monthly Mean Air Temp:
latitudes<- ncvar_get(nc, "lat")
longitudes<- ncvar_get(nc, "lon")
tiempos<- ncvar_get(nc, "time")
head(tiempos)
#ver unidades de tiempo<- en este caso es horas
tiempos_legibles<- as.Date(tiempos/24,origin="1800-01-01") #como está en horas lo divido por 24
head(tiempos_legibles)
#Ahora lo hago con lubridate
library(lubridate)
#Ahora lo hago con lubridate
library("lubridate")
#Ahora lo hago con lubridate
library(lubridate)
#miramos los primeros meses
head(months(tiempos_legibles))
#Con esta función podemos seleccionar de nuestro array los datos que son del mes de marzo:
datos_temp_marzo <- temp_aire[, , months(tiempos_legibles) == "marzo"]
dim(datos_temp_marzo) #tengo las 144 lon, 73 lat y 74 tiempos que corresponden a los datos de marzo
