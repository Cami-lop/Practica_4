LS <- 0.295 +(VC*ES)
LS
VC<-qt(0.995,69) #VC obtenido de la distribuci?n t, y ojo porque es n-1, 70-1=69
VC
?z.test
?Z.test
install.packages("BSDA")
library(BSDA)
?Z.test
?z.test
1.9/2
ppois(2,1.9/2)
ppois(2,1)
ppois(2,1.9/2,F)
ppois(2,1.9,F)
ppois(2,1.8,F)
ppois(2,2,F)
ppois(2,1,F)
ppois(2,1,T)
ppois(2,0.8,T)
ppois(2,0.8,F)
ppois(2,0.95,F)
ppois(2,1.9,F)
ppois(4,3.8,F)
ppois(4,9.5,F)
pbinom(2,2,1.9)
pbinom(2,1.9,2)
pbinom(2,1.9,2,F)
pbinom(2,2,1.9,F)
pbinom(8,100,2)
pbinom(8,100,0.2)
pbinom(8,100,0.2,F)
pbinom(8,100,0.02,F)
ppois(8,0.02)
qbinom(8,100,0.02)
qbinom(8,100,0.02,T)
dbinom(8,100,0.02,T)
dbinom(8,200,0.02)
pbinom(0.02916018,100,0.02)
ppois(2,0.95)
ppois(1,0.95)
ppois(1,0.95,F)
ppois(1,1.9,F)
ppois(1,2/1.95,F)
ppois(2,1.95,F)
ppois(1,2/1.95,F)
ppois(1,2/1.9,F)
ppois(2,1.9/2,F)
ppois(1,1.9/2,F)
ppois(2,1.9)
n1 <- 7
pbinom(2,2,0.7037)
ppois(1.9,2)
ppois(2,1.9)
ppois(2,1.9,F)
ppois(4,3.8,F)
ppois(4,9.5,F)
mu<-(0.125*2+0.175*5+0.225*10+0.275*16+0.325*23+0.375*11+0.425*3)/70
ppois(4,9.5,T)
ppois(4,3.8,T)
ppois(4,3.8,T) -ppois(4,3.8,F)
ppois(4,3.8,T) - ppois(4,3.8,F)
ppois(4,3.8,F) - ppois(4,3.8,F)
ppois(4,3.8,F) - ppois(4,3.8,T)
ppois(5,3.8,T) - ppois(4,3.8,T)
dpois(2,1.9)
dpois(4,3.8)
pbinom(8,200,0.02,T)
pbinom(8,200,0.02,F)
pbinom(8,100,0.02,F)
pbinom(8,200,0.04,F)
pbinom(200,8,0.02,F)
pbinom(8,200,0.02,F)
pbinom(8,100,0.02,F)
qbinom(8,100,0.02,F)
pbinom(8,100,0.04)
pbinom(8,100,0.04,F)
dbinom(2,100,0.04,F)
dbinom(2,100,0.02,F)
dbinom(2,200,0.02,F)
pbinom(4,200,0.02,F)
pbinom(8,200,0.02,F)
pbinom(8,200,0.02,T)
qinom(8,200,0.02,T)
qbinom(8,200,0.02,T)
dbinom(8,200,0.02,T)
dbinom(8,200,0.02,F)
dbinom(8,200,0.02,F) + pbiom(8,200,0.02,T)
o
dbinom(8,200,0.02,F) + pbinom(8,200,0.02,T)
dbinom(8,200,0.02,F) + pbinom(8,200,0.02,F)
dbinom(12,200,0.02,F)
dbinom(12,200,0.02,F) - pbinom(12,200,0.02,F)
dbinom(12,200,0.02,F) - pbinom(12,200,0.02,T)
pbinom(11,200,0.02,T) - pbinom(12,200,0.02,F)
pbinom(11,200,0.02,F) - pbinom(12,200,0.02,T)
pbinom(11,200,0.02,F) - pbinom(12,200,0.02,F)
pbinom(11,200,0.02,T) - pbinom(12,200,0.02,T)
dbinom(11,200,0.02,T) - dbinom(12,200,0.02,T)
dbinom(11,200,0.02,F) - dbinom(12,200,0.02,T)
dbinom(11,200,0.02,F) - dbinom(12,200,0.02,F)
dbinom(12,200,0.02,F) - dbinom(13,200,0.02,F)
dbinom(13,200,0.02,F) - dbinom(12,200,0.02,F)
dbinom(10,50,0.35,F)
pbinom(18,50,0.35,F)
pbinom(18,50,0.35,T)
pbinom(18,50,0.35,F)
pbinom(18,50,0.35,F) + dbinom(18,50,0.35,F)
ppois(10,15,F) - ppois (16,15,F)
ppois(10,15,F) - ppois (16,15,F) + dpois(16,15,F)
ppois(10,15,T) - ppois (16,15,T) + dpois(16,15,F)
ppois(10,15,F) - ppois (16,15,F) + dpois(16,15,F) + dpois(10,15,F)
ppois(10,15,F) - ppois (16,15,F) + dpois(16,15,T) + dpois(10,15,T)
ppois(10,15,F) - ppois (16,15,F) + dpois(10,15,F)
ppois(13,15,F)
qpois(0.6367822,15,F)
qpois(0.6367822,15,T)
ppois(13,15,T)
fo<- c(110,36,44,16)
proporciones <- c(9/16,3/16,3/16,1/16)
#######################Clase Teorica 31/10#######################
######################### graficos ##############################
rm(list=ls())
#alto y ancho es de 5 cm
layout.show(nf)
#EJEMPLO 3
## crea una sola figura de 5cm x 5cm
nf <- layout(matrix(1), widths = lcm(5), heights =
lcm(5)) #le especifico el alto y el ancho de la figura
#alto y ancho es de 5 cm
#layout.show(nf)
------------------------------------------------------------------------------
#alto y ancho es de 5 cm
layout.show(nf)
y <- pmin(3, pmax(-3, stats::rnorm(50)))
xhist <- hist(x, breaks = seq(-3,3,0.5), plot = FALSE)
yhist <- hist(y, breaks = seq(-3,3,0.5), plot = FALSE)
top <- max(c(xhist$counts, yhist$counts))
xrange <- c(-3, 3)
yrange <- c(-3, 3)
nf <- layout(matrix(c(2,0,1,3),2,2,byrow = TRUE), c(3,1), c(1,3), TRUE)
layout.show(nf)
#Grafico lo que diseñe antes
par(mar = c(3,3,1,1))
plot(x, y, xlim = xrange, ylim = yrange, xlab = "", ylab = "")
#alto y ancho es de 5 cm
layout.show(nf)
#alto y ancho es de 5 cm
layout.show(nf)
x <- pmin(3, pmax(-3, stats::rnorm(50)))
par(mar = c(3,3,1,1))
plot(x, y, xlim = xrange, ylim = yrange, xlab = "", ylab = "")
par(mar = c(0,3,1,1))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0)
xhist <- hist(x, breaks = seq(-3,3,0.5), plot = FALSE)
yhist <- hist(y, breaks = seq(-3,3,0.5), plot = FALSE)
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0)
op <- max(c(xhist$counts, yhist$counts))
top <- max(c(xhist$counts, yhist$counts))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0)
barplot(yhist$counts, axes = FALSE, xlim = c(0, top), space = 0, horiz = TRUE)
#Otro ejemplo<- 4 graficos en una sola hoja
x<-array(rnorm(100),c(100,4)) #creo los datos a graficar. Replico los 100 datos en 4 columnas
titulo<-c("Figura1","Figura 2","Figura 3","Figura 4") #Titulo de cada grafico individual
par(fig=c(0,1,0,1), # Region de la Figura dentro de la region display (x1,x2,y1,y2)
omi=c(0.05,0.15,0,0.05), # margenes globales en pulgadas (inferior, izquierdo,
superior, derecho)
par(fig=c(0,1,0,1), # Region de la Figura dentro de la region display (x1,x2,y1,y2)
omi=c(0.05,0.15,0,0.05), # margenes globales en pulgadas (inferior, izquierdo,superior, derecho)
mai=c(0.6,0.6,0.6,0.5)) # margenes del subplot en pulgadas (inf izq, superior, derecho)
layout(matrix(1:4, 2, 2, byrow= TRUE))
for(k in 1:4){
plot(x[,k], type="l", col="darkblue", lwd=2,
ylab="variable",xlab="tiempo",xlim=c(0,100),ylim=c(-3,3) )
title(main=(titulo[k]), line=1, cex.main=1.2)
abline(v=20,lty=2,col="grey"); abline(v=40,lty=2,col="grey");
abline(v=60,lty=2,col="grey")
}
getwd()
#setwd("C:/Users/camil/OneDrive/Escritorio/Cami_Labo/Practica_4")
setwd("/home/clinux01/Escritorio/CamiLabo/Practica_4/")
############################### Ejercicio ##############################
library(metR)
require(ncdf4)
library(lubridate)
library(ggplot2)
#Calcular el promedio de temperatura anual (promedio de los 12 meses del
#aÃ±o) y graficar la serie resultante con lineas y puntos. AdemÃ¡s agregar la
#linea de tendencia lineal.
#Quedemosnos unicamente con el punto mas cercano a la estacion OCBA
# (-34,-58)
#archivo <- "C:/Users/camil/OneDrive/Escritorio/Cami_Labo/Practica_4/datos-20231031T140954Z-001/datos/air.mon.mean.nc" #donde esta el archivo
archivo<-"/home/clinux01/Escritorio/CamiLabo/Practica_4/datos-20231031T140954Z-001/datos/air.mon.mean.nc"
datos_OCBA<- ReadNetCDF(archivo, vars = "air",
subset = list(lat =-34,
lon = 360-58))
class (datos_OCBA_periodo) #data.frame
datos_OCBA<- ReadNetCDF(archivo, vars = "air",
subset = list(lat =-34,
lon = 360-58))
############################### Ejercicio ##############################
library(metR)
#Curve ejemplo
#Traza una curva correspondiente a la función sobre el intervalo [desde, hasta].
#curve también puede graficar una expresión en la variable xname, default x.
curve(sin, -2*pi, 2*pi, xname = "t")
curve(tan, xname = "t", add = NA, main =
"curve(tan) --> same x-scale as previous plot")
#BARPLOT
require(grDevices) # librería para colores
tN <- table(Ni <- stats::rpois(100, lambda = 5))
#genera datos al azar usando la funcion de poisson media 5
r <- barplot(tN, col = rainbow(20))
#- type = "h" plotting *is* 'bar'plot
lines(r, tN, type = "h", col = "red", lwd = 2)
#lines siempre superpone sobre graficos preexistente, le agregue la linea vertical de color rojo y ancho dos
barplot(tN, space = 1.5, axisnames = FALSE,
sub = "barplot(..., space= 1.5, axisnames = FALSE)")
#hay mas ejemlos en el pp de Moira
#Graficos en dos ejes
x<-array(rnorm(100),c(100,4))
par(fig=c(0,1,0,1), # Region de la figura en el display device (x1,x2,y1,y2)
omi=c(0.05,0.9,0,0.3)) # margenes globales en pulgadas (abajo, izq, sup, derecha)
plot(x[,1], type="l", col="darkblue", lwd=3, ylab="variable 1",xlab="Tiempo", xlim=c(0,100), ylim
=c(-3,3) )
title(main=("Grafico en dos ejes"), font=2, line=1, cex.main=1.2)
par(new=TRUE) #para graficar sobre la figura anterior
barplot(x[,3]*x[,1], col="darkred",lwd=2, yaxt="n", ylab="",xaxt="n", xlab="",cex.axis=1.0 )
axis(4, cex.axis=1.0) ## Valores en el eje izquierdo
mtext("variable 2", side=4, line=2, col="darkred", cex=1.0) ## Texto para el eje derecho
barplot(x[,3]*x[,1], col="darkpink",lwd=2, yaxt="n", ylab="",xaxt="n", xlab="",cex.axis=1.0 )
axis(4, cex.axis=1.0) ## Valores en el eje izquierdo
mtext("variable 2", side=4, line=2, col="darkpink", cex=1.0) ## Texto para el eje derecho (la otra variable )
barplot(x[,3]*x[,1], col="pink",lwd=2, yaxt="n", ylab="",xaxt="n", xlab="",cex.axis=1.0 )
axis(4, cex.axis=1.0) ## Valores en el eje izquierdo
mtext("variable 2", side=4, line=2, col="pink", cex=1.0) ## Texto para el eje derecho (la otra variable )
#hay mas ejemlos en el pp de Moira
#Graficos en dos ejes
x<-array(rnorm(100),c(100,4))
par(fig=c(0,1,0,1), # Region de la figura en el display device (x1,x2,y1,y2)
omi=c(0.05,0.9,0,0.3)) # margenes globales en pulgadas (abajo, izq, sup, derecha)
plot(x[,1], type="l", col="darkblue", lwd=3, ylab="variable 1",xlab="Tiempo", xlim=c(0,100), ylim #eje de una variable
=c(-3,3) )
title(main=("Grafico en dos ejes"), font=2, line=1, cex.main=1.2) #titulo principal
par(new=TRUE) #para graficar sobre la figura anterior/ nueva dimension para graficar sobre el mismo que ya existe
barplot(x[,3]*x[,1], col="pink",lwd=2, yaxt="n", ylab="",xaxt="n", xlab="",cex.axis=1.0 )
axis(4, cex.axis=1.0) ## Valores en el eje izquierdo
mtext("variable 2", side=4, line=2, col="pink", cex=1.0) ## Texto para el eje derecho (la otra variable )
#Boxplot
#también es posible dibujar boxplots para matrices, uno por cada columna (variable) de la matriz.
x<-array(rnorm(100),c(100,5))
boxplot(x)
#COUNTOUR(funcion basica para graf de isolineas)
#EJEMPLO 1
x <- -6:16
op <- par(mfrow = c(2, 2),mai=c(0.4,0.4,0.4,0.4))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge", vfont = c("sans serif", "plain"))
contour(x, x, z, ylim = c(1, 6), method = "simple", labcex = 1, xlab = quote(x[1]), ylab = quote(x[2]))
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple", main = "20 levels; \"simple\"
labelling method",cex.main=0.8)
#EJEMPLO 2 <-Correrlo linea por linea
rx <- range(x <- 10*1:nrow(volcano))
ry <- range(y <- 10*1:ncol(volcano))
ry <- ry + c(-1, 1) * (diff(rx) - diff(ry))/2
tcol <- terrain.colors(12)
par(opar); opar <- par(pty = "s", bg = "lightcyan")
plot(x = 0, y = 0, type = "n", xlim = rx, ylim = ry, xlab = "", ylab = "")
u <- par("usr")
rect(u[1], u[3], u[2], u[4], col = tcol[8], border = "red")
contour(x, y, volcano, col = tcol[2], lty = "solid", add = TRUE, vfont = c("sans serif", "plain"))
title("A Topographic Map of Maunga Whau", font = 4)
abline(h = 200*0:4, v = 200*0:4, col = "lightgray", lty = 2, lwd = 0.1)
#EJEMPLO 2 <-Correrlo linea por linea
rx <- range(x <- 10*1:nrow(volcano))
ry <- range(y <- 10*1:ncol(volcano))
ry <- ry + c(-1, 1) * (diff(rx) - diff(ry))/2
tcol <- terrain.colors(12)
par(opar); opar <- par(pty = "s", bg = "lightcyan")
opar <- par(pty = "s", bg = "lightcyan")
par(opar);
plot(x = 0, y = 0, type = "n", xlim = rx, ylim = ry, xlab = "", ylab = "")
u <- par("usr")
rect(u[1], u[3], u[2], u[4], col = tcol[8], border = "red")
contour(x, y, volcano, col = tcol[2], lty = "solid", add = TRUE, vfont = c("sans serif", "plain"))
title("A Topographic Map of Maunga Whau", font = 4)
abline(h = 200*0:4, v = 200*0:4, col = "lightgray", lty = 2, lwd = 0.1)
#FILLED.COUNTOUR
x <- 10*1:nrow(volcano)
y <- 10*1:ncol(volcano)
filled.contour(x, y, volcano, color = terrain.colors,
plot.title = title(main = "The Topography of Maunga Whau",
xlab = "Meters North", ylab = "Meters West"),
plot.axes = { axis(1, seq(100, 800, by = 100))
axis(2, seq(100, 600, by = 100)) },
key.title = title(main = "Height\n(meters)"),
key.axes = axis(4, seq(90, 190, by = 10)))
mtext(paste("filled.contour(.) from", R.version.string),
side = 1, line = 4, adj = 1, cex = .66)
xlab = "Meters North", ylab = "Meters West")
filled.contour(x, y, volcano, color = terrain.colors,
plot.title = title(main = "The Topography of Maunga Whau",
xlab = "Meters North", ylab = "Meters West"),
plot.axes = { axis(1, seq(100, 800, by = 100))
axis(2, seq(100, 600, by = 100)) },
key.title = title(main = "Height\n(meters)"),
key.axes = axis(4, seq(90, 190, by = 10)))
filled.contour(x, y, volcano, color = terrain.colors,
plot.title = title(main = "The Topography of Maunga Whau",
xlab = "Meters North",ylab = "Meters West"),
plot.axes = { axis(1, seq(100, 800, by = 100))
axis(2, seq(100, 600, by = 100)) },
key.title = title(main = "Height\n(meters)"),
key.axes = axis(4, seq(90, 190, by = 10)))
mtext(paste("filled.contour(.) from", R.version.string),
side = 1, line = 4, adj = 1, cex = .66)
#ASP=1 HACE QUE EL EJE X SEA IGUAL AL EJE Y ESTA EN EL OTRO EJEMPLO
#EJEMPLO 15 IMPORTANTE MUESTRA COMO SUPERPONER GRAFICOS DE DIST TIPOS
#MESH<-PLOTEO DE SUPERFICIE EN 3D
require(plot3D)
install.packages("plot3D")
#ASP=1 HACE QUE EL EJE X SEA IGUAL AL EJE Y ESTA EN EL OTRO EJEMPLO
#EJEMPLO 15 IMPORTANTE MUESTRA COMO SUPERPONER GRAFICOS DE DIST TIPOS
#MESH<-PLOTEO DE SUPERFICIE EN 3D
require(plot3D)
X=matrix(seq(-8,8,by=0.5),ncol=33,nrow=33)
Y=matrix(seq(-8,8,by=0.5),ncol=33,nrow=33,byrow=T)
#Otra forma de generar los dos renglones anteriores es usando la funcion mesh
MM<-mesh(seq(-8,8,by=0.5),seq(-8,8,by=0.5))
class(MM)
X<-MM$x ; Y<-MM$y
R = sqrt(X^2 + Y^2) + .Machine$double.eps
#La matriz R contiene la distancia desde el centro de  la matriz,
#que es el origen. Sumar eps impide la divisi�n por cero
#(en la etapa siguiente) que genera valores Inf en los datos.
Z = sin(R)/R
surf3D(X,Y,Z,facets=F)
surf3D(X,Y,Z,facets=NA)
surf3D(X,Y,Z,facets=F,border = "black",colkey=F)
surf3D(X,Y,Z)
surf3D(X,Y,Z,phi=40,theta = 20)
surf3D(X,Y,Z,phi=40,theta = 60)
surf3D(X,Y,Z,colkey=F)
surf3D(X,Y,Z,colvar=Y,colkey=F,ltheta=20,bty="b2",phi=0)
surf3D(X,Y,Z,colvar=X,colkey=F,bty="b")
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,shade=0.5)
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,border = "black", xlim = range(X)*0.8,
ylim = range(Y)*0.8, zlim = range(Z)*0.8)
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,border = "black", xlim = range(X)*0.8,
ylim = range(Y)*0.8, zlim = range(Z)*1.2)
surf3D(X,Y,Z,box=FALSE,theta=60,col = "lightblue", shade = 0.9)
for (angle in seq(0, 360, by = 10)) plotdev(theta = angle)
X=matrix(seq(-8,8,by=0.5),ncol=33,nrow=33)
Y=matrix(seq(-8,8,by=0.5),ncol=33,nrow=33,byrow=T)
#Otra forma de generar los dos renglones anteriores es usando la funcion mesh
MM<-mesh(seq(-8,8,by=0.5),seq(-8,8,by=0.5))
class(MM)
X<-MM$x ; Y<-MM$y
R = sqrt(X^2 + Y^2) + .Machine$double.eps
#La matriz R contiene la distancia desde el centro de  la matriz,
#que es el origen. Sumar eps impide la divisi�n por cero
#(en la etapa siguiente) que genera valores Inf en los datos.
Z = sin(R)/R
surf3D(X,Y,Z,facets=F)
surf3D(X,Y,Z,facets=NA)
surf3D(X,Y,Z,facets=F,border = "black",colkey=F)
surf3D(X,Y,Z)
surf3D(X,Y,Z,phi=40,theta = 20)
surf3D(X,Y,Z,phi=40,theta = 60)
surf3D(X,Y,Z,colkey=F)
surf3D(X,Y,Z,colvar=Y,colkey=F,ltheta=20,bty="b2",phi=0)
surf3D(X,Y,Z,colvar=X,colkey=F,bty="b")
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,shade=0.5)
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,border = "black", xlim = range(X)*0.8,
ylim = range(Y)*0.8, zlim = range(Z)*0.8)
surf3D(X,Y,Z,colvar=X,colkey=F,box=F,border = "black", xlim = range(X)*0.8,
ylim = range(Y)*0.8, zlim = range(Z)*1.2)
surf3D(X,Y,Z,box=FALSE,theta=60,col = "lightblue", shade = 0.9)
for (angle in seq(0, 360, by = 10)) plotdev(theta = angle)
x<-1:36
y<-sqrt(x)
plot(x,y,type="l",xlab="x",ylab="y", main="Parabola y=x^2", col="red")
Dev.off()
#Con la flecha en plots ir hacia atras para ver los graficos
#generados con el for
#GUARDAR GRAFICOS DE R EN DIST FORMATOS
#si los guardo no aparecen, primero lo corro para verlo en la pantalla y despues lo guardo en algun formato
jpeg(“Grafico.jpg”) #toma todas las opciones default- lo guardo en jpg
#Con la flecha en plots ir hacia atras para ver los graficos
#generados con el for
#GUARDAR GRAFICOS DE R EN DIST FORMATOS
#si los guardo no aparecen, primero lo corro para verlo en la pantalla y despues lo guardo en algun formato
jpeg("Grafico.jpg") #toma todas las opciones default- lo guardo en jpg
x<-1:36
y<-sqrt(x)
plot(x,y,type="l",xlab="x",ylab="y", main="Parabola y=x^2", col="red")
Dev.off()
Dev.off()
Dev.off()
#Con la flecha en plots ir hacia atras para ver los graficos
#generados con el for
#GUARDAR GRAFICOS DE R EN DIST FORMATOS
#si los guardo no aparecen, primero lo corro para verlo en la pantalla y despues lo guardo en algun formato
jpeg("Grafico.jpg") #toma todas las opciones default- lo guardo en jpg
x<-1:36
y<-sqrt(x)
plot(x,y,type="l",xlab="x",ylab="y", main="Parabola y=x^2", col="red")
Dev.off()
dev.off()
#Con la flecha en plots ir hacia atras para ver los graficos
#generados con el for
#GUARDAR GRAFICOS DE R EN DIST FORMATOS
#si los guardo no aparecen, primero lo corro para verlo en la pantalla y despues lo guardo en algun formato
jpeg("Grafico.jpg") #toma todas las opciones default- lo guardo en jpg
x<-1:36
y<-sqrt(x)
plot(x,y,type="l",xlab="x",ylab="y", main="Parabola y=x^2", col="red")
dev.off()
#EJEMPLO DE CREAR Y GUARADR GRAFICOS
#### Generar los gráficos de Ejemplos de Rectángulos en RStudio
example(rect)
# Generar los gráficos de Ejemplos de Rectángulos como JPEG
jpeg(file = "myplot.jpeg")
example(rect)
dev.off()
# Repetir lo anterior pero cambiando el nombre del archivo como se ve abajo
jpeg(file = "myplot%02d.jpeg")
example(rect)
dev.off()
dev.off()
#EJEMPLO DE CREAR Y GUARADR GRAFICOS
#### Generar los gráficos de Ejemplos de Rectángulos en RStudio
example(rect)
#POINTS<-agrega puntos sobre un grafico (puntos o simbolos)
#EJEMPLO 2: PCH dentro de la funcion plot / PCH <- simbolos
op <- par(bg = "light green")
x <- seq(0, 2*pi, len = 51)
plot(x, sin(x), type = "o", pch = 24, bg="cyan",col = "blue", cex = .8)
install.packages("fields")
#IMAGE.PLOT
require(fields)
#IMAGE.PLOT
require(fields)
#IMAGE.PLOT
require(fields) #necesito esta libreria
x<- 1:10
y<- 1:15
z<- outer( x,y,"+")
image.plot(x,y,z) #creo la imagen
obj<- list( x=x,y=y,z=z)
image.plot(obj, legend.lab="Sverdrups")
points( 5:12, 5:12, pch="X", cex=3)
image.plot(x,y,z) #creo la imagen
#o bien creando una lista y poniendo etiquetas
obj<- list( x=x,y=y,z=z)
image.plot(obj, legend.lab="Sverdrups")
#identifico algunos puntos sobre la imagen
points( 5:12, 5:12, pch="X", cex=3)
#EJEMPLO 4
#Grafica datos de precipitacion de un modelo climatico regional en una grilla irregular
data( RCMexample) #cargo los datos
image.plot( RCMexample$x, RCMexample$y, RCMexample$z[,,1])
#agrego el mapa
world( add=TRUE, lwd=2, col="grey")
#hago zoom en una region
ind<- 50:75
image.plot( RCMexample$x[ind,ind], RCMexample$y[ind,ind], RCMexample$z[ind,ind,1],
border="grey50", lwd=2) #marco los bordes de las grillas en gri
setwd("/home/clinux01/Escritorio/Cami_Labo/Practica_4/")
setwd("/home/clinux01/Escritorio/CamiLabo/Practica_4/")
#setwd("C:/Users/camil/OneDrive/Escritorio/Cami_Labo/Practica_4")
setwd("/home/clinux01/Escritorio/CamiLabo/Practica_4/")
############################### Ejercicio ##############################
library(metR)
require(ncdf4)
library(lubridate)
library(ggplot2)
############################### Ejercicio ##############################
library(metR)
install.packages("checkmate")
#Calcular el promedio de temperatura anual (promedio de los 12 meses del
#aÃ±o) y graficar la serie resultante con lineas y puntos. AdemÃ¡s agregar la
#linea de tendencia lineal.
#Quedemosnos unicamente con el punto mas cercano a la estacion OCBA
# (-34,-58)
#archivo <- "C:/Users/camil/OneDrive/Escritorio/Cami_Labo/Practica_4/datos-20231031T140954Z-001/datos/air.mon.mean.nc" #donde esta el archivo
archivo<-"/home/clinux01/Escritorio/CamiLabo/Practica_4/datos-20231031T140954Z-001/datos/air.mon.mean.nc"
datos_OCBA<- ReadNetCDF(archivo, vars = "air",
subset = list(lat =-34,
lon = 360-58))
library(lubridate)
library(ggplot2)
############################### Ejercicio ##############################
library(metR)
library(lubridate)
library(ggplot2)
#Calcular el promedio de temperatura anual (promedio de los 12 meses del
#aÃ±o) y graficar la serie resultante con lineas y puntos. AdemÃ¡s agregar la
#linea de tendencia lineal.
#Quedemosnos unicamente con el punto mas cercano a la estacion OCBA
# (-34,-58)
#archivo <- "C:/Users/camil/OneDrive/Escritorio/Cami_Labo/Practica_4/datos-20231031T140954Z-001/datos/air.mon.mean.nc" #donde esta el archivo
archivo<-"/home/clinux01/Escritorio/CamiLabo/Practica_4/datos-20231031T140954Z-001/datos/air.mon.mean.nc"
datos_OCBA<- ReadNetCDF(archivo, vars = "air",
subset = list(lat =-34,
lon = 360-58))
class (datos_OCBA_periodo) #data.frame
datos_OCBA<- ReadNetCDF(archivo, vars = "air",
subset = list(lat =-34,
lon = 360-58))
